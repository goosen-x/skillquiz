import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import { getTestBySlug } from '@/data/tests';
import { parseShortUrl } from '@/lib/short-urls';
import { getPersonalityTypeById } from '@/data/personality-type-test';
import { getDigitalPersonaById } from '@/data/digital-wellness-test';
import { getEmotionalIntelligenceById } from '@/data/emotional-intelligence-test';
import { impostorSyndromeResults } from '@/data/impostor-syndrome-test';
import { psychologicalResilienceResults } from '@/data/mental-resilience-test';
import { dopamineDetoxResults } from '@/data/dopamine-detox-test';
import UniversalTestResults from '@/components/tests/UniversalTestResults';
import { YandexAd } from '@/components/shared/YandexAd';
import { loadTest } from '@/lib/test-loader';
import { recoverTestResult } from '@/lib/result-recovery';

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
interface LocalTestResult {
  name: string;
  description: string;
  emoji: string;
  color: string;
  percentage: number;
  characteristics: string[];
  advice: string[];
  chartData?: unknown[];
  chartType?: 'bar' | 'pie' | 'radar';
  factorScores?: { [key: string]: number };
  factorDescriptions?: {
    [key: string]: {
      high: string;
      medium: string;
      low: string;
    };
  };
  methodology?: {
    title: string;
    description: string;
    applications: string[];
    notes: string[];
  };
  detailedFactors?: Array<{
    name: string;
    score: number;
    level: 'high' | 'medium' | 'low';
    description: string;
    icon?: string;
    color?: string;
  }>;
}

interface Props {
  params: Promise<{ slug: string }>;
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
}

export async function generateMetadata({ params, searchParams }: Props): Promise<Metadata> {
  const { slug } = await params;
  const search = await searchParams;
  const test = getTestBySlug(slug);
  const urlData = parseShortUrl(new URLSearchParams(search as Record<string, string>));

  if (!test || !urlData) {
    return {
      title: '–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    };
  }

  return {
    title: `${urlData.resultType} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ "${test.title}"`,
    description: `–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ "${test.title}". –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!`,
  };
}

export default async function ShortResultPage({ params, searchParams }: Props) {
  const { slug } = await params;
  const search = await searchParams;
  const test = getTestBySlug(slug);
  const urlData = parseShortUrl(new URLSearchParams(search as Record<string, string>));

  if (!test || !urlData) {
    notFound();
  }

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏
  let result: LocalTestResult | null = null;

  // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤
  const isLegacyTest = [
    'personality-type',
    'digital-wellness-persona',
    'emotional-intelligence',
    'impostor-syndrome',
    'mental-resilience',
    'dopamine-detox-need',
  ].includes(slug);

  if (!isLegacyTest) {
    // –î–ª—è –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫
    try {
      const testData = await loadTest(test);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const universalResult = recoverTestResult(slug, urlData, testData);
      if (universalResult) {
        result = {
          name: universalResult.name,
          description: universalResult.description,
          emoji: universalResult.emoji || 'üéØ',
          color: universalResult.color || 'blue',
          percentage: universalResult.percentage || 0,
          characteristics: universalResult.characteristics || [],
          advice: universalResult.advice || universalResult.recommendations || [],
          chartData: universalResult.chartData,
          chartType: universalResult.chartType,
          factorScores: universalResult.factorScores,
          factorDescriptions: undefined,
        };
      }
    } catch (error) {
      console.error('Failed to load test data:', error);
    }
  } else if (slug === 'personality-type') {
    // –î–ª—è —Ç–µ—Å—Ç–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ç–∏–ø–∞ –∏ –æ—Ü–µ–Ω–æ–∫
    const personalityResult = getPersonalityTypeById(urlData.resultType);
    if (!personalityResult) {
      notFound();
    }

    // –ï—Å–ª–∏ scores –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞
    const defaultScores = urlData.scores || [50, 50, 50, 50, 50];

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏ Big Five
    const [extraversion, agreeableness, conscientiousness, neuroticism, openness] = defaultScores;
    const scores = {
      extraversion,
      agreeableness,
      conscientiousness,
      neuroticism,
      openness,
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const chartData = [
      { factor: '–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è', value: extraversion },
      { factor: '–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: agreeableness },
      { factor: '–î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å', value: conscientiousness },
      { factor: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', value: 100 - neuroticism },
      { factor: '–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É', value: openness },
    ];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
    const getFactorLevel = (score: number): 'high' | 'medium' | 'low' => {
      if (score >= 70) return 'high';
      if (score >= 40) return 'medium';
      return 'low';
    };

    // –û–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    const factorDescriptions = {
      extraversion: {
        high: '–í—ã –æ–±—â–∏—Ç–µ–ª—å–Ω—ã, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ —ç–Ω–µ—Ä–≥–∏—é –æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª—é–¥—å–º–∏. –õ—é–±–∏—Ç–µ –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ª–µ–≥–∫–æ –∑–∞–≤–æ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.',
        medium:
          '–í—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º –ø–ª–∞–Ω–µ - –º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∫–∞–∫ –æ–±—â–µ–Ω–∏–µ–º, —Ç–∞–∫ –∏ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ–º, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏.',
        low: '–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ç–∏—à–∏–Ω—É –∏ —É–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∫—Ä—É–≥ –æ–±—â–µ–Ω–∏—è. –ü–æ–ª—É—á–∞–µ—Ç–µ —ç–Ω–µ—Ä–≥–∏—é –æ—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–µ–¥–∏–Ω–µ —Å —Å–æ–±–æ–π.',
      },
      agreeableness: {
        high: '–í—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã, –æ—Ç–∑—ã–≤—á–∏–≤—ã –∏ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º. –¶–µ–Ω–∏—Ç–µ –≥–∞—Ä–º–æ–Ω–∏—é –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –ª–µ–≥–∫–æ –∏–¥–µ—Ç–µ –Ω–∞ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã.',
        medium:
          '–í—ã —É–º–µ–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∑–∞–±–æ—Ç–æ–π –æ –¥—Ä—É–≥–∏—Ö –∏ –∑–∞—â–∏—Ç–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –ü—Ä–æ—è–≤–ª—è–µ—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π —Å–∫–µ–ø—Ç–∏—Ü–∏–∑–º.',
        low: '–í—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã, –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã –∏ —Å—Ç–∞–≤–∏—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –≤—ã—à–µ –∂–µ–ª–∞–Ω–∏—è –Ω—Ä–∞–≤–∏—Ç—å—Å—è. –¶–µ–Ω–∏—Ç–µ —á–µ—Å—Ç–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ –¥–∏–ø–ª–æ–º–∞—Ç–∏–∏.',
      },
      conscientiousness: {
        high: '–í—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤—Å–µ–≥–¥–∞ –¥–æ–≤–æ–¥–∏—Ç–µ –¥–µ–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞. –õ—é–±–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.',
        medium:
          '–í—ã —Å–ø–æ—Å–æ–±–Ω—ã –±—ã—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–∞–∫–∂–µ —Ü–µ–Ω–∏—Ç–µ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å –∏ –≥–∏–±–∫–æ—Å—Ç—å –≤ –ø–æ–¥—Ö–æ–¥–∞—Ö.',
        low: '–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≥–∏–±–∫–æ—Å—Ç—å –∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–≥–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –õ—é–±–∏—Ç–µ –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ö–æ–¥—É.',
      },
      neuroticism: {
        high: '–í—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã, —Å–ø–æ–∫–æ–π–Ω—ã –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –∏ –æ–±–ª–∞–¥–∞–µ—Ç–µ —É—Å—Ç–æ–π—á–∏–≤—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º.',
        medium:
          '–í–∞—à–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤. –ò–Ω–æ–≥–¥–∞ —Å—Ç—Ä–µ—Å—Å –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—Å.',
        low: '–í—ã —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Å—Ç—Ä–µ—Å—Å—É –∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è. –í–∞–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º.',
      },
      openness: {
        high: '–í—ã –ª—é–±–æ–ø—ã—Ç–Ω—ã, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã –∏ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–æ–≤–æ–º—É –æ–ø—ã—Ç—É. –¶–µ–Ω–∏—Ç–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ, –∏–¥–µ–∏ –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.',
        medium:
          '–í—ã –æ—Ç–∫—Ä—ã—Ç—ã –Ω–æ–≤–æ–º—É, –Ω–æ —Ç–∞–∫–∂–µ —Ü–µ–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã. –£–º–µ–µ—Ç–µ —Å–æ–≤–º–µ—â–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ —Å –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å—é.',
        low: '–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã. –¶–µ–Ω–∏—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å.',
      },
    };

    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    const detailedFactors = [
      {
        name: '–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è',
        score: scores.extraversion,
        level: getFactorLevel(scores.extraversion),
        description: factorDescriptions.extraversion[getFactorLevel(scores.extraversion)],
        icon: 'Users',
        color: 'chart-1',
      },
      {
        name: '–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        score: scores.agreeableness,
        level: getFactorLevel(scores.agreeableness),
        description: factorDescriptions.agreeableness[getFactorLevel(scores.agreeableness)],
        icon: 'Heart',
        color: 'chart-2',
      },
      {
        name: '–î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å',
        score: scores.conscientiousness,
        level: getFactorLevel(scores.conscientiousness),
        description: factorDescriptions.conscientiousness[getFactorLevel(scores.conscientiousness)],
        icon: 'Target',
        color: 'chart-3',
      },
      {
        name: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
        score: 100 - scores.neuroticism,
        level: getFactorLevel(100 - scores.neuroticism),
        description: factorDescriptions.neuroticism[getFactorLevel(100 - scores.neuroticism)],
        icon: 'Shield',
        color: 'chart-4',
      },
      {
        name: '–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É',
        score: scores.openness,
        level: getFactorLevel(scores.openness),
        description: factorDescriptions.openness[getFactorLevel(scores.openness)],
        icon: 'Sparkles',
        color: 'chart-5',
      },
    ];

    result = {
      name: personalityResult.name,
      description: personalityResult.description,
      emoji: personalityResult.emoji,
      color:
        personalityResult.color === 'var(--chart-1)'
          ? 'yellow'
          : personalityResult.color === 'var(--chart-2)'
            ? 'blue'
            : personalityResult.color === 'var(--chart-3)'
              ? 'green'
              : personalityResult.color === 'var(--chart-4)'
                ? 'purple'
                : personalityResult.color === 'var(--chart-5)'
                  ? 'orange'
                  : 'blue',
      percentage: 15,
      characteristics: personalityResult.characteristics,
      advice: personalityResult.advice,
      chartData: chartData,
      chartType: 'radar',
      factorScores: scores,
      detailedFactors: detailedFactors,
      factorDescriptions: factorDescriptions,
      methodology: {
        title: '–û –º–æ–¥–µ–ª–∏ Big Five',
        description:
          '–ú–æ–¥–µ–ª—å Big Five (–ë–æ–ª—å—à–∞—è –ü—è—Ç–µ—Ä–∫–∞) - —ç—Ç–æ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –ø—è—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö. –≠—Ç–∞ –º–æ–¥–µ–ª—å —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–ª–∏–¥–Ω—ã—Ö –∏ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –æ—Ü–µ–Ω–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö —á–µ—Ä—Ç.',
        applications: [
          '–ö–∞—Ä—å–µ—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
          '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
          '–õ–∏—á–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
          '–£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π',
        ],
        notes: [
          '–õ–∏—á–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è',
          '–ù–µ—Ç "–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö" —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
          '–í—Å–µ —Ç–∏–ø—ã –∏–º–µ—é—Ç —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã',
          '–†–µ–∑—É–ª—å—Ç–∞—Ç - –æ—Å–Ω–æ–≤–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è',
        ],
      },
    };
  } else if (slug === 'digital-wellness-persona') {
    const digitalResult = getDigitalPersonaById(urlData.resultType);
    if (digitalResult) {
      result = {
        name: digitalResult.name,
        description: digitalResult.description,
        emoji: digitalResult.emoji,
        color: digitalResult.color,
        percentage: digitalResult.percentage,
        characteristics: digitalResult.characteristics || [],
        advice: digitalResult.advice || [],
      };
    }
  } else if (slug === 'emotional-intelligence') {
    const emotionalResult = getEmotionalIntelligenceById(urlData.resultType);
    if (emotionalResult) {
      result = {
        name: emotionalResult.name,
        description: emotionalResult.description,
        emoji: emotionalResult.emoji,
        color: emotionalResult.color,
        percentage: 20, // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        characteristics: emotionalResult.characteristics || [],
        advice: emotionalResult.advice || [],
      };
    }
  } else if (slug === 'impostor-syndrome') {
    const impostorResult = impostorSyndromeResults.find((r) => r.id === urlData.resultType);
    if (impostorResult) {
      // Generate chartData if not present
      const chartData = impostorResult.chartData?.length
        ? impostorResult.chartData
        : [
            {
              factor: '–°–æ–º–Ω–µ–Ω–∏—è –≤ —Å–µ–±–µ',
              value: Math.round(impostorResult.factors?.selfDoubt || 50),
            },
            {
              factor: '–°—Ç—Ä–∞—Ö —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏—è',
              value: Math.round(impostorResult.factors?.fearOfExposure || 50),
            },
            {
              factor: '–ü—Ä–∏–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤–µ–∑–µ–Ω–∏—é',
              value: Math.round(impostorResult.factors?.attributionToLuck || 50),
            },
            {
              factor: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º',
              value: Math.round(impostorResult.factors?.perfectionism || 50),
            },
            {
              factor: '–°–æ–º–Ω–µ–Ω–∏—è –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏',
              value: Math.round(impostorResult.factors?.competenceDoubt || 50),
            },
          ];

      result = {
        name: impostorResult.title,
        description: impostorResult.description,
        emoji: impostorResult.emoji,
        color: impostorResult.color === 'red' ? 'orange' : impostorResult.color || 'yellow',
        percentage: 15, // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        characteristics: impostorResult.characteristics || [],
        advice: impostorResult.advice || [],
        chartData: chartData,
        chartType: 'radar',
        factorScores: impostorResult.factors,
      };
    }
  } else if (slug === 'mental-resilience') {
    const resilienceResult = psychologicalResilienceResults.find(
      (r) => r.id === urlData.resultType
    );
    if (resilienceResult) {
      // Generate chartData if factors present
      let chartData;
      if (resilienceResult.factors) {
        chartData = [
          {
            factor: '–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å',
            value: Math.round(resilienceResult.factors.adaptability || 50),
          },
          {
            factor: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è',
            value: Math.round(resilienceResult.factors.emotionalRegulation || 50),
          },
          { factor: '–û–ø—Ç–∏–º–∏–∑–º', value: Math.round(resilienceResult.factors.optimism || 50) },
          {
            factor: '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º',
            value: Math.round(resilienceResult.factors.problemSolving || 50),
          },
          {
            factor: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
            value: Math.round(resilienceResult.factors.socialSupport || 50),
          },
        ];
      }

      result = {
        name: resilienceResult.name,
        description: resilienceResult.description,
        emoji: resilienceResult.emoji,
        color: resilienceResult.color,
        percentage: 20, // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        characteristics: resilienceResult.characteristics || [],
        advice: resilienceResult.advice || [],
        chartData: chartData,
        chartType: chartData ? 'radar' : undefined,
        factorScores: resilienceResult.factors,
      };
    }
  } else if (slug === 'dopamine-detox-need') {
    const dopamineResult = dopamineDetoxResults.find((r) => r.id === urlData.resultType);
    if (dopamineResult) {
      // Generate chartData if factors present
      let chartData;
      if (dopamineResult.factors) {
        chartData = [
          {
            factor: '–¶–∏—Ñ—Ä–æ–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å',
            value: Math.round(dopamineResult.factors.digitalAddiction || 50),
          },
          {
            factor: '–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ',
            value: Math.round(dopamineResult.factors.instantGratification || 50),
          },
          {
            factor: '–§–æ–∫—É—Å –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è',
            value: Math.round(dopamineResult.factors.focusConcentration || 50),
          },
          {
            factor: '–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è',
            value: Math.round(dopamineResult.factors.procrastination || 50),
          },
          {
            factor: '–ü–æ–∏—Å–∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π',
            value: Math.round(dopamineResult.factors.rewardSeeking || 50),
          },
        ];
      }

      result = {
        name: dopamineResult.name,
        description: dopamineResult.description,
        emoji: dopamineResult.emoji,
        color: dopamineResult.color,
        percentage: 10, // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        characteristics: dopamineResult.characteristics || [],
        advice: dopamineResult.advice || [],
        chartData: chartData,
        chartType: chartData ? 'radar' : undefined,
        factorScores: dopamineResult.factors,
      };
    }
  } else {
    notFound();
  }

  if (!result) {
    notFound();
  }

  // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
  const dummyAnswers: number[] = [];

  return (
    <div className="min-h-screen bg-secondary-background relative">
      {/* Grid pattern background */}
      <div
        className="absolute inset-0"
        style={{
          backgroundImage: `repeating-linear-gradient(0deg, var(--border) 0px, transparent 2px, transparent 80px, var(--border) 82px),
                        repeating-linear-gradient(90deg, var(--border) 0px, transparent 2px, transparent 80px, var(--border) 82px)`,
          opacity: 0.1,
        }}
      />

      <div className="relative z-10 max-w-7xl mx-auto">
        <div className="px-4 py-8">
          {/* Main content with padding for ad */}
          <div className="lg:pr-[332px]">
            <UniversalTestResults test={test} result={result} answers={dummyAnswers} />
          </div>
        </div>

        {/* Fixed Advertisement */}
        <div
          className="hidden lg:block fixed top-8 right-8 w-[300px]"
          style={{ right: 'max(2rem, calc((100vw - 80rem) / 2 + 2rem))' }}
        >
          <div className="border-2 border-border bg-background p-4 shadow-shadow">
            <p className="text-sm font-bold uppercase mb-4 text-center">–†–µ–∫–ª–∞–º–∞</p>
            <YandexAd blockId="R-A-17422960-1" className="w-full" />
          </div>
        </div>
      </div>
    </div>
  );
}
